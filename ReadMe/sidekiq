issues
1)  uninitialized constant sidekiq worker
    a)added gem and created worker file in app/workers
    b) worker seems uninitialized (in rails console)
    solution: ActiveSupport::Dependencies.autoload_paths did not contain worker path. For that, restart the spring
    https://stackoverflow.com/questions/43795343/uninitialized-constant-sidekiq-worker/43816217


2)Signal Handling
 a) TTIN : kill -TTIN sidekiq_process -> backtraces the sidekiq threads, to check like why the particular thread is stuck or busy
 b) USR1 : kill -USR1 sidekiq_process -> stops taking the jobs , place new upcoming jobs in queues.
 c) TERM : kill -TERM sidekiq_process -> first finishes the running jobs and stops the sidekiq
 d) resume the terminated sidekiq how ? -> bundle exec sidekiq -P ~/temp/sidekiq.pid

Notes:
https://shashwat-creator.medium.com/all-you-need-to-know-about-sidekiq-a4b770a71f8f
https://medium.com/@josh_works/sidekiq-and-background-jobs-for-beginners-89c95fef786f
note setup redis :https://medium.com/@petehouston/install-and-config-redis-on-mac-os-x-via-homebrew-eb8df9a4f298
Tab 1: Fire up a redis-server by typing in redis-server
Tab 2: Fire up your Sidekiq by typing in bundle exec sidekiq
Tab 3: Fire up your actual Rails app by typing in rails s

Sidekiq client creates job and serialize the jobs into json string, place it in redis queue.
Sidekiq server pulls queued job and processes it.
The number of jobs that sidekiq server will perform at a time depends on available threads. we can set the concurrency in sidekiq.yml file which should be same as pool size in database.yml
Sidekiq::Queue.new('default').size
Sidekiq::ScheduledSet.new
Sidekiq::RetrySet.new
Sidekiq::Stats.new
